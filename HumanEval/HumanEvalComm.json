{
    "task_id": "HumanEval/0",
    "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
    "prompt1p": "from typing import List\n\n\ndef candidate(...) -> bool:\n \"\"\" Check given a list of number.\"\"\"\n",
    "prompt2ap": "from typing import List\n\n\ndef candidate(numbers: List[float], x: float) -> bool:\n \"\"\" given a list of number.\"\"\"\n",
    "entry_point": "has_close_elements",
    "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
    "test_case": [
        {
            "input": "[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3",
            "output": "True",
            "relation": "=="
        },
        {
            "input": "[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05",
            "output": "False",
            "relation": "=="
        },
        {
            "input": "[1.0, 2.0, 5.9, 4.0, 5.0], 0.95",
            "output": "True",
            "relation": "=="
        },
        {
            "input": "[1.0, 2.0, 5.9, 4.0, 5.0], 0.8",
            "output": "False",
            "relation": "=="
        },
        {
            "input": "[1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1",
            "output": "True",
            "relation": "=="
        },
        {
            "input": "[1.1, 2.2, 3.1, 4.1, 5.1], 1.0",
            "output": "True",
            "relation": "=="
        },
        {
            "input": "[1.1, 2.2, 3.1, 4.1, 5.1], 0.5",
            "output": "False",
            "relation": "=="
        }
    ]
};
{
    "task_id": "HumanEval/1",
    "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
    "prompt1c": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['(', '(', '(']\n    \"\"\"\n",
    "prompt1p": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n \"\"\"\n",
    "prompt1a": "from typing import List\n\n\ndef candidate(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n   Keep or ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
    "prompt2ap": "from typing import List\n\n\ndef candidate(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n \"\"\"\n",
    "prompt2ac": "from typing import List\n\n\ndef candidate(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n   Keep or ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['(', '(', '(']\n    \"\"\"\n",
    "entry_point": "separate_paren_groups",
    "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
    "test_case": [
        {
            "input": "'(()()) ((())) () ((())()())'",
            "output": "['(()())', '((()))', '()', '((())()())']",
            "relation": "=="
        },
        {
            "input": "'() (()) ((())) (((())))'",
            "output": "['()', '(())', '((()))', '(((())))']",
            "relation": "=="
        },
        {
            "input": "'(()(())((())))'",
            "output": "['(()(())((())))']",
            "relation": "=="
        },
        {
            "input": "'( ) (( )) (( )( ))'",
            "output": "['()', '(())', '(()())']",
            "relation": "=="
        }
    ]
};
{
    "task_id": "HumanEval/2",
    "entry_point": "truncate_number",
    "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
    "prompt1a": "\n\ndef candidate(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer or decimal part of the number.\n    >>> candidate(3.5)\n    0.5\n    \"\"\"\n",
    "prompt1c": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    3\n    \"\"\"\n",
    "prompt1p": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n        \"\"\"\n",
    "prompt2ap": "\n\ndef candidate(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n        \"\"\"\n",
    "prompt2ac": "\n\ndef candidate(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer or decimal part of the number.\n    >>> candidate(3.5)\n    3\n    \"\"\"\n",
    "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1.0\n",
    "test_case": [
        {
            "input": "3.5",
            "output": "0.5",
            "relation": "=="
        },
        {
            "input": "1.33",
            "output": "1e-6",
            "relation": "abs(candidate(1.33) - 0.33) < 1e-6"
        },
        {
            "input": "123.456",
            "output": "1e-6",
            "relation": "abs(candidate(123.456) - 0.456) < 1e-6"
        }
    ]
};
{
    "task_id": "HumanEval/3",
    "entry_point": "below_zero",
    "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
    "prompt1c": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    False\n    \"\"\"\n",
    "prompt1a": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n   positive or zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    False\n    \"\"\"\n",
    "prompt1p": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero.   \"\"\"\n",
    "prompt2ap": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n   positive or zero balance. Your task is to detect if at any point the balance of account fallls below zero.   \"\"\"\n",
    "prompt2ac": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n   positive or zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    False\n    \"\"\"\n",
    "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
    "test_case": [
        {
            "input": "[]",
            "output": "False",
            "relation": "=="
        },
        {
            "input": "[1, 2, -3, 1, 2, -3]",
            "output": "False",
            "relation": "=="
        },
        {
            "input": "[1, 2, -4, 5, 6]",
            "output": "True",
            "relation": "=="
        },
        {
            "input": "[1, -1, 2, -2, 5, -5, 4, -4]",
            "output": "False",
            "relation": "=="
        },
        {
            "input": "[1, -1, 2, -2, 5, -5, 4, -5]",
            "output": "True",
            "relation": "=="
        },
        {
            "input": "[1, -2, 2, -2, 5, -5, 4, -4]",
            "output": "True",
            "relation": "=="
        }
    ]
};
{
    "task_id": "HumanEval/4",
    "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
    "prompt1c": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    3.0\n    \"\"\"\n",
    "prompt1a": "from typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the max or mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (max or mean in this case):\n    MAD = average | x - (x_max or x_mean) |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
    "prompt1p": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation. \n >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
    "prompt2cp": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation. \n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    3.0\n    \"\"\"\n",
    "prompt2ap": "from typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    MAD = average | x - (x_max or x_mean) |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
    "prompt2ac": "from typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the max or mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (max or mean in this case):\n    MAD = average | x - (x_max or x_mean) |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    3.0\n    \"\"\"\n",
    "prompt3acp": "from typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation.   >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    3.0\n    \"\"\"\n",
    "entry_point": "mean_absolute_deviation",
    "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
    "test_case": [
        {
            "input": "[1.0, 2.0, 3.0]",
            "output": "1e-6",
            "relation": "abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6"
        },
        {
            "input": "[1.0, 2.0, 3.0, 4.0]",
            "output": "1e-6",
            "relation": "abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6"
        },
        {
            "input": "[1.0, 2.0, 3.0, 4.0, 5.0]",
            "output": "1e-6",
            "relation": "abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6"
        }
    ]
}