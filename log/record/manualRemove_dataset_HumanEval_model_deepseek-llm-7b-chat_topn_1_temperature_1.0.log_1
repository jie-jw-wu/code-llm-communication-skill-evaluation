{"name": "HumanEval/0", "response_candidates": ["```python\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    seen = set()\n    for num in numbers:\n        close_to = [n for n in numbers if abs(num - n) < threshold and n not in seen]\n        if close_to:\n            seen.update(close_to)\n    return len(seen) > 0\n```"], "code_candidates": [{"code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    seen = set()\n    for num in numbers:\n        close_to = [n for n in numbers if abs(num - n) < threshold and n not in seen]\n        if close_to:\n            seen.update(close_to)\n    return len(seen) > 0", "prompt_ask_q": false, "index": 0, "passed_case": [], "case_status": ["execution error: 1", "execution error: 1", "execution error: 1", "execution error: 1", "execution error: 1", "execution error: 1", "execution error: 1"], "question_quality": "0"}]}
{"name": "HumanEval/1", "response_candidates": ["```python\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(char)\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # ['()', '(())', '(()())']\n```"], "code_candidates": [{"code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(char)\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # ['()', '(())', '(()())']", "prompt_ask_q": false, "index": 0, "passed_case": [], "case_status": ["[')', ')', ')', ')']", "[')', ')', ')', ')']", "[')']", "[')', ')', ')']"], "question_quality": "0"}]}
{"name": "HumanEval/2", "response_candidates": ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n\n\n# Test cases\nprint(truncate_number(3.5)) # 0.5\nprint(truncate_number(2.75)) # 0.25\nprint(truncate_number(0.75)) # 0.25\nprint(truncate_number(1.0)) # 0.0\nprint(truncate_number(2.0)) # 1.0"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/3", "response_candidates": ["```python\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n```"], "code_candidates": [{"code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_ask_q": false, "index": 0, "passed_case": [], "case_status": ["execution error: 1", "execution error: 1", "execution error: 1", "execution error: 1", "execution error: 1", "execution error: 1"], "question_quality": "0"}]}
{"name": "HumanEval/4", "response_candidates": ["```python\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(x - mean) for x in numbers]\n    mad = sum(abs_diffs) / len(numbers)\n    return mad\n```"], "code_candidates": [{"code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(x - mean) for x in numbers]\n    mad = sum(abs_diffs) / len(numbers)\n    return mad", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2], "case_status": ["True", "True", "True"], "question_quality": "0"}]}
{"name": "HumanEval/5", "response_candidates": ["```python\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n```"], "code_candidates": [{"code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2], "case_status": ["[]", "[5, 8, 6, 8, 3, 8, 2]", "[2, 2, 2, 2, 2]"], "question_quality": "0"}]}
{"name": "HumanEval/6", "response_candidates": ["```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def count_nested_parentheses(s: str) -> int:\n        count = 0\n        i = 0\n        while i < len(s):\n            if s[i] == '(':\n                count += 1\n                i += 1\n            else:\n                if s[i - 1] == '(':\n                    count += 1\n                i += 1\n        return count\n    \n    def max_nested_level(s: str) -> int:\n        max_level = 0\n        level = 0\n        i = 0\n        while i < len(s):\n            if s[i] == '(':\n                level += 1\n                i += 1\n            else:\n                if level > max_level:\n                    max_level = level\n                level -= 1\n                i += 1\n        return max_level\n    \n    levels = []\n    groups = paren_string.split()\n    for group in groups:\n        levels.append(max_nested_level(group))\n    return levels\n\n# Test cases\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # [2, 3, 1, 3]\n```"], "code_candidates": [{"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def count_nested_parentheses(s: str) -> int:\n        count = 0\n        i = 0\n        while i < len(s):\n            if s[i] == '(':\n                count += 1\n                i += 1\n            else:\n                if s[i - 1] == '(':\n                    count += 1\n                i += 1\n        return count\n    \n    def max_nested_level(s: str) -> int:\n        max_level = 0\n        level = 0\n        i = 0\n        while i < len(s):\n            if s[i] == '(':\n                level += 1\n                i += 1\n            else:\n                if level > max_level:\n                    max_level = level\n                level -= 1\n                i += 1\n        return max_level\n    \n    levels = []\n    groups = paren_string.split()\n    for group in groups:\n        levels.append(max_nested_level(group))\n    return levels\n\n# Test cases\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # [2, 3, 1, 3]", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2], "case_status": ["[2, 3, 1, 3]", "[1, 2, 3, 4]", "[4]"], "question_quality": "0"}]}
{"name": "HumanEval/7", "response_candidates": ["```python\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n```"], "code_candidates": [{"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2, 3], "case_status": ["[]", "['xxx', 'xxxAAA', 'xxx']", "['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "['grunt', 'prune']"], "question_quality": "0"}]}
{"name": "HumanEval/8", "response_candidates": ["```python\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers) * (len(numbers) if numbers else 1), 1 if numbers else 1)\n\nprint(sum_product([]))  # Output: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Output: (10, 24)\n```"], "code_candidates": [{"code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers) * (len(numbers) if numbers else 1), 1 if numbers else 1)\n\nprint(sum_product([]))  # Output: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Output: (10, 24)", "prompt_ask_q": false, "index": 0, "passed_case": [0], "case_status": ["(0, 1)", "(9, 1)", "(200, 1)", "(45, 1)", "(10, 1)"], "question_quality": "0"}]}
{"name": "HumanEval/9", "response_candidates": ["```python\nfrom typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_val = numbers[0]\n    result.append(max_val)\n    \n    for num in numbers[1:]:\n        if num > max_val:\n            max_val = num\n        result.append(max_val)\n    \n    return result\n\n# Test cases\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))  # [1, 2, 3, 3, 3, 4, 4]\nprint(rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(rolling_max([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))  # [10, 20, 30, 40, "], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/10", "response_candidates": ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome_suffix = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindrome_suffix = string[i:]\n            break\n    prefix = string[:len(string) - len(palindrome_suffix)]\n    return string + prefix[::-1]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/11", "response_candidates": ["```python\nfrom typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n# Test cases\nprint(string_xor('010', '110'))  # Output: '100'\n```"], "code_candidates": [{"code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n# Test cases\nprint(string_xor('010', '110'))  # Output: '100'", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2], "case_status": ["010010", "0", "0101"], "question_quality": "0"}]}
{"name": "HumanEval/12", "response_candidates": ["```python\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\nprint(longest([]))  # None\nprint(longest(['a', 'b', 'c']))  # 'a'\nprint(longest(['a', 'bb', 'ccc']))  # 'ccc'\n```"], "code_candidates": [{"code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\nprint(longest([]))  # None\nprint(longest(['a', 'b', 'c']))  # 'a'\nprint(longest(['a', 'bb', 'ccc']))  # 'ccc'", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2], "case_status": ["None", "x", "zzzz"], "question_quality": "0"}]}
{"name": "HumanEval/13", "response_candidates": ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/14", "response_candidates": ["```python\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[0] + i*'$' for i in range(len(string) + 1)]\n```"], "code_candidates": [{"code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[0] + i*'$' for i in range(len(string) + 1)]", "prompt_ask_q": false, "index": 0, "passed_case": [], "case_status": ["execution error: 1", "['a', 'a$', 'a$$', 'a$$$', 'a$$$$', 'a$$$$$', 'a$$$$$$']", "['W', 'W$', 'W$$', 'W$$$']"], "question_quality": "0"}]}
{"name": "HumanEval/15", "response_candidates": ["def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n)))\n\n\nprint(string_sequence(0))\nprint(string_sequence(5))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/16", "response_candidates": ["def count_distinct_characters(string: str) -> int:\n    return len(set(string))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/17", "response_candidates": ["from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n# Test case\nprint(parse_music('o o| .| o| o| .| .| .| .| o o')) # [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/18", "response_candidates": ["```python\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n```"], "code_candidates": [{"code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2, 3], "case_status": ["0", "4", "4", "1"], "question_quality": "0"}]}
{"name": "HumanEval/19", "response_candidates": ["```python\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted([numbers_dict[num] for num in numbers])\n    return ' '.join(map(str, sorted_numbers))\n```"], "code_candidates": [{"code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted([numbers_dict[num] for num in numbers])\n    return ' '.join(map(str, sorted_numbers))", "prompt_ask_q": false, "index": 0, "passed_case": [0], "case_status": ["", "execution error: 1", "execution error: 1", "execution error: 1", "execution error: 1"], "question_quality": "0"}]}
{"name": "HumanEval/20", "response_candidates": ["```python\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two numbers\")\n    \n    min_val = min(numbers[0], numbers[1])\n    max_val = max(numbers[0], numbers[1])\n    \n    for i in range(2, len(numbers)):\n        if numbers[i] < min_val:\n            min_val = numbers[i]\n        if numbers[i] > max_val:\n            max_val = numbers[i]\n    \n    min_index = numbers.index(min_val)\n    max_index = numbers.index(max_val)\n    \n    if min_index > max_index:\n        return (numbers[min_index], numbers[max_index])\n    else:\n        return (numbers[max_index], numbers[min_index])\n\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/21", "response_candidates": ["```python\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    max_val = max(numbers)\n    min_val = min(numbers)\n    range_val = max_val - min_val\n    return [((num - min_val) / range_val) for num in numbers]\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n```"], "code_candidates": [{"code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    max_val = max(numbers)\n    min_val = min(numbers)\n    range_val = max_val - min_val\n    return [((num - min_val) / range_val) for num in numbers]\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2, 3, 4], "case_status": ["[0.0, 1.0]", "[1.0, 0.0]", "[0.0, 0.25, 0.5, 0.75, 1.0]", "[0.25, 0.0, 1.0, 0.5, 0.75]", "[0.25, 0.0, 1.0, 0.5, 0.75]"], "question_quality": "0"}]}
{"name": "HumanEval/22", "response_candidates": ["```python\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n```"], "code_candidates": [{"code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2], "case_status": ["[]", "[4, 9]", "[3, 3, 3]"], "question_quality": "0"}]}
{"name": "HumanEval/23", "response_candidates": ["```python\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n```"], "code_candidates": [{"code": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2], "case_status": ["0", "1", "9"], "question_quality": "0"}]}
{"name": "HumanEval/24", "response_candidates": ["def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Start from n and go down until we find a divisor\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n    return -1\n\n# Test cases\nprint(largest_divisor(15)) # Output: 5\nprint(largest_divisor(24)) # Output: 24\nprint(largest_divisor(1)) # Output: -1"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/25", "response_candidates": ["```python\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    factors.sort()\n    return factors\n\n# Test cases\nprint(factorize(8))  # Output: [1, 2, 2, 2]\nprint(factorize(25))  # Output: [1, 5, 5]\nprint(factorize(70))  # Output: [1, 2, 5, 7]\n```"], "code_candidates": [{"code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    factors.sort()\n    return factors\n\n# Test cases\nprint(factorize(8))  # Output: [1, 2, 2, 2]\nprint(factorize(25))  # Output: [1, 5, 5]\nprint(factorize(70))  # Output: [1, 2, 5, 7]", "prompt_ask_q": false, "index": 0, "passed_case": [], "case_status": ["[1, 2]", "[1, 2, 4]", "[1, 2, 4, 8]", "[1, 3, 19, 57]", "[1, 3, 9, 19, 57, 171, 361, 1083, 3249]", "[1, 3, 9, 19, 27, 57, 171, 361, 513, 1083, 3249, 6859, 9747, 20577, 61731, 185193]", "[1, 3, 19, 57, 361, 1083, 6859, 20577]", "[1, 2, 3, 6, 9, 18]"], "question_quality": "0"}]}
{"name": "HumanEval/26", "response_candidates": ["```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n```"], "code_candidates": [{"code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1], "case_status": ["[]", "[1, 2, 3, 4]", "[1, 2, 3, 4, 5]"], "question_quality": "0"}]}
{"name": "HumanEval/27", "response_candidates": ["def flip_case(string: str) -> str:\n    return string[:: -1]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/28", "response_candidates": ["```python\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\n# Test cases\nprint(concatenate([])) # ''\nprint(concatenate(['a', 'b', 'c'])) # 'abc'\n```"], "code_candidates": [{"code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\n# Test cases\nprint(concatenate([])) # ''\nprint(concatenate(['a', 'b', 'c'])) # 'abc'", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2], "case_status": ["", "xyz", "xyzwk"], "question_quality": "0"}]}
{"name": "HumanEval/29", "response_candidates": ["```python\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n```"], "code_candidates": [{"code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1], "case_status": ["[]", "['xxx', 'xxxAAA', 'xxx']"], "question_quality": "0"}]}
{"name": "HumanEval/30", "response_candidates": ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    return [i for i in l if i > 0]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/31", "response_candidates": ["def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/32", "response_candidates": ["def find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        return \"Error: List of coefficients must have an even number of elements.\"\n\n    largest_coeff = max(xs)\n    if largest_coeff == 0:\n        return \"Error: List of coefficients must have a non-zero largest coefficient.\"\n\n    # Find the sign of the largest coefficient\n    sign = -1 if largest_coeff < 0 else 1\n\n    #"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/33", "response_candidates": ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    divisible_by_three = [l[i] for i in range(0, len(l), 3)]\n    sorted_divisible_by_three = sorted(divisible_by_three)\n    for i, val in enumerate(sorted_divisible_by_three):\n        l[i*3] = val\n    return l\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/34", "response_candidates": ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/35", "response_candidates": ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/36", "response_candidates": ["```python\ndef fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n-1, 0, -1):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += str(i).count('7')\n        if i <= 7:\n            count += 1\n    return count\n```"], "code_candidates": [{"code": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n-1, 0, -1):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += str(i).count('7')\n        if i <= 7:\n            count += 1\n    return count", "prompt_ask_q": false, "index": 0, "passed_case": [], "case_status": ["7", "9", "10", "10", "13", "199", "646", "8033"], "question_quality": "0"}]}
{"name": "HumanEval/37", "response_candidates": ["def sort_even(l: list):\n    even_values = [l[i] for i in range(0, len(l), 2)]\n    even_values.sort()\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_values[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result\n\n\nprint(sort_even([1, 2, 3]))  # [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))  # [3, 6, 5, 4]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/38", "response_candidates": ["def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycling operation in each group.\n    groups = [(group[-1] + group[-2] + group[-3]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/39", "response_candidates": ["def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        x = 0\n        y = 1\n        while y < num:\n            z = x + y\n            x = y\n            y = z\n        return num == y\n\n    count = 0\n    a, b = 0, 1\n    while count < n:\n        if is_prime(b) and is_fibonacci(b):\n            count += 1\n        a, b = b, a + b\n    return b\n\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/40", "response_candidates": ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # Initialize a set to store the elements of the list\n    elements = set(l)\n\n    # Iterate over the elements of the list\n    for i in elements:\n        # Iterate over the remaining elements of the list\n        for j in elements:\n            # Iterate over the remaining elements of the list\n            for k in elements:\n                # Check if the sum of the three elements is zero\n                if i + j + k =="], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/41", "response_candidates": ["```python\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j and (i == n-1 and j == 0) or (i == 0 and j == n-1):\n                collisions += 1\n    return collisions\n```"], "code_candidates": [{"code": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j and (i == n-1 and j == 0) or (i == 0 and j == n-1):\n                collisions += 1\n    return collisions", "prompt_ask_q": false, "index": 0, "passed_case": [], "case_status": ["2", "2", "2", "2", "2"], "question_quality": "0"}]}
{"name": "HumanEval/42", "response_candidates": ["```python\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    return [i + 1 if i < 9 else i for i in l]\n\n# Test cases\nprint(incr_list([1, 2, 3]))  # should print [2, 3, 4]\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # should print [6, 4, 6, 3, 4, 4, 10, 1, 124]\n```"], "code_candidates": [{"code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    return [i + 1 if i < 9 else i for i in l]\n\n# Test cases\nprint(incr_list([1, 2, 3]))  # should print [2, 3, 4]\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # should print [6, 4, 6, 3, 4, 4, 10, 1, 124]", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1], "case_status": ["[]", "[4, 3, 2]", "[6, 3, 6, 3, 4, 4, 9, 1, 123]"], "question_quality": "0"}]}
{"name": "HumanEval/43", "response_candidates": ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Initialize a set to store the elements that have been checked\n    checked = set()\n\n    for num in l:\n        # If the complement of the current number is in the set,\n        # then there are two numbers that sum to zero\n        if -num in checked:\n            return True\n        # Otherwise, add the current number to the set\n        checked.add(num)\n\n    # If no two numbers sum to zero, return False\n    return False"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/44", "response_candidates": ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0 or base < 2 or base > 10:\n        raise ValueError(\"x and base must be non-negative and between 2 and 10\")\n\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = \"\"\n\n    while x:\n        x, remainder = divmod(x, base)\n        result = digits[remainder] + result\n    return result"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/45", "response_candidates": ["```python\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n```"], "code_candidates": [{"code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2], "case_status": ["7.5", "2.0", "40.0"], "question_quality": "0"}]}
{"name": "HumanEval/46", "response_candidates": ["def fib4(n: int):\n    if n < 4:\n        return 0\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 4\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n-4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\nprint(fib4(5))  # 4\nprint(fib4(6))  # 8\nprint(fib4(7))  # 14"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/47", "response_candidates": ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    s = sorted(l)\n    return (s[n//2] if n % 2 else s[n//2])"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/48", "response_candidates": ["```python\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n```"], "code_candidates": [{"code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2, 3, 4, 5, 6], "case_status": ["True", "True", "True", "False", "True", "False", "False"], "question_quality": "0"}]}
{"name": "HumanEval/49", "response_candidates": ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/50", "response_candidates": ["def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/51", "response_candidates": ["def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/52", "response_candidates": ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/53", "response_candidates": ["```python\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n```"], "code_candidates": [{"code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "case_status": ["1", "1", "5", "12", "12", "768", "784", "531", "370", "858", "1450", "1471", "693", "464", "125", "461", "1133", "601", "936", "1383", "987", "684", "887", "1718", "783", "988", "1146", "632", "379", "1761", "448", "483", "466", "1219", "888", "870", "1217", "676", "1940", "467", "865", "1492", "1539", "1252", "787", "792", "723", "1024", "377", "1113", "990", "673", "1114", "1227", "545", "577", "959", "1677", "1362", "696", "825", "1292", "417", "861", "1223", "1359", "794", "1033", "1649", "851", "1075", "856", "733", "341", "1151", "1545", "1632", "539", "1182", "1310", "1594", "615", "413", "1014", "1125", "1033", "1036", "1516", "778", "365", "1026", "866", "929", "268", "805", "1507", "1042", "459", "1000", "1020", "1251", "1447", "976", "1434", "815"], "question_quality": "0"}]}
{"name": "HumanEval/54", "response_candidates": ["def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/55", "response_candidates": ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/56", "response_candidates": ["def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/57", "response_candidates": ["```python\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(map(lambda x, y: x <= y, l, l[1:])) or all(map(lambda x, y: x >= y, l, l[1:]))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"], "code_candidates": [{"code": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(map(lambda x, y: x <= y, l, l[1:])) or all(map(lambda x, y: x >= y, l, l[1:]))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2, 3, 4, 5, 6, 7], "case_status": ["True", "True", "False", "True", "True", "False", "True", "True"], "question_quality": "0"}]}
{"name": "HumanEval/58", "response_candidates": ["def common(l1: list, l2: list):\n    common_elements = set(l1) & set(l2)\n    return sorted(list(common_elements))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/59", "response_candidates": ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        n += 1\n        while not is_prime(n):\n            n += 1\n        return n\n\n    while n % 2 == 0:\n        n //= 2\n    if n == 1:\n        return n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 2\n    return n\n\nprint(largest_prime_factor(13195))\nprint(largest_prime_factor(2048))\nprint(largest_prime_factor(130))\nprint(largest_prime_factor(11))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/60", "response_candidates": ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/61", "response_candidates": ["def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/62", "response_candidates": ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivative_list = [xs[i] for i in range(1, len(xs))]\n    for i in range(len(xs)):\n        derivative_list[i] = i * xs[i]\n    return derivative_list"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/63", "response_candidates": ["def fibfib(n: int):\n    if n < 3:\n        return [0, 0, 1][n]\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/64", "response_candidates": ["def vowels_count(s):\n    count = 0\n    vowels = \"aeiou\"\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s.endswith(\"y\"):\n        count += 1\n    return count"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/65", "response_candidates": ["```python\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    shift %= len(digits)\n    return ''.join(digits[i:]+digits[:i] for i in range(shift, len(digits), shift))\n\n# Test cases\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\"\n```"], "code_candidates": [{"code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    shift %= len(digits)\n    return ''.join(digits[i:]+digits[:i] for i in range(shift, len(digits), shift))\n\n# Test cases\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\"", "prompt_ask_q": false, "index": 0, "passed_case": [], "case_status": ["execution error: 1", "execution error: 1", "execution error: 1", "execution error: 1", "execution error: 1"], "question_quality": "0"}]}
{"name": "HumanEval/66", "response_candidates": ["def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/67", "response_candidates": ["def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[1])\n    total_fruits = n\n    mangoes = total_fruits - apples - oranges\n    return mangoes\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19)) # 19\nprint(fruit_distribution(\"0 apples and 1 oranges\",3)) # 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # 95\nprint(fruit_distribution(\"100 apples and 1 oranges\",120)) # 19"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/68", "response_candidates": ["```python\ndef pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_even_index = i\n    if smallest_even_index == -1:\n        return []\n    else:\n        return [smallest_even_value, smallest_even_index]\n```\n\nThis code defines a function `pluck"], "code_candidates": [{"code": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_even_index = i\n    if smallest_even_index == -1:\n        return []\n    else:\n        return [smallest_even_value, smallest_even_index]", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2, 3, 4, 5, 6, 7], "case_status": ["[2, 1]", "[2, 1]", "[]", "[0, 1]", "[0, 3]", "[4, 1]", "[6, 1]", "[]"], "question_quality": "0"}]}
{"name": "HumanEval/69", "response_candidates": ["def search(lst):\n    max_freq = -1\n    max_num = -1\n    for num in set(lst):\n        freq = lst.count(num)\n        if freq >= max_freq and num > 0:\n            max_freq = freq\n            max_num = num\n    return max_num if max_num != -1 else -1\n\nprint(search([4, 1, 2, 2, 3, 1])) #== 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) #== 3\nprint(search([5, 5, 4, 4, 4])) #== -1"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/70", "response_candidates": ["def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        result.append(lst.pop(-1))\n    return result\n\n\n# Test cases\nprint(strange_sort_list([1, 2, 3, 4]))  # [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # [5, 5, 5, 5]\nprint(strange_sort_list([]))  # []\nprint(strange_sort_list([10, 20, 30, 40]))  # [10, 40, 20, 30]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/71", "response_candidates": ["def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/72", "response_candidates": ["def will_it_fly(q, w):\n    def is_palindrome(q):\n        return q == q[::-1]\n\n    return is_palindrome(q) and sum(q) <= w\n\n# Test cases\nprint(will_it_fly([1, 2], 5)) # False\nprint(will_it_fly([3, 2, 3], 1)) # False\nprint(will_it_fly([3, 2, 3], 9)) # True\nprint(will_it_fly([3], 5)) # True"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/73", "response_candidates": ["def smallest_change(arr):\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr, target):\n        return sum(abs(a - b) for a, b in zip(arr, arr[1:]))\n\n    return min(count_changes(arr, target) for target in range(10)) + is_palindrome(arr)\n\n\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # 0\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # 0\nprint(smallest_change([1, 2, 3, 5, 4, 7, "], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/74", "response_candidates": ["def total_match(lst1, lst2):\n    def count_chars(lst):\n        total = 0\n        for string in lst:\n            total += sum(map(str.isalpha, string))\n        return total\n\n    return lst1 if count_chars(lst1) < count_chars(lst2) else lst2"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/75", "response_candidates": ["def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = []\n    i = 2\n    while i * i <= a:\n        if a % i:\n            i += 1\n        else:\n            j = i\n            while j <= a:\n                if a % j == i:\n                    primes.append(j)\n                    a //= j\n                j += 1\n            if len(primes) >= 3:\n                break\n        i += 1\n    else:\n        if len(primes) == 3:\n            return True\n\n    return False"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/76", "response_candidates": ["def is_simple_power(x, n):\n    return n ** (int(x)) == x"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/77", "response_candidates": ["def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_perfect_cube(n):\n    return is_prime(n**3)\n\ndef is_perfect_cube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_perfect_cube(1) ==> True\n    is_perfect_cube(2) ==> False\n    is_perfect_cube(-1) ==> True\n    is_perfect_cube(64) ==> True\n    is_perfect_cube(0) ==> True\n    is_perfect_cube(180) ==> False\n    '''\n    return is_perfect_cube(a)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/78", "response_candidates": ["def hex_key(num):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/79", "response_candidates": ["def decimal_to_binary(decimal):\n    binary = bin(decimal).replace(\"0b\", \"\")\n    binary = \"db\" + binary + \"db\"\n    return binary\n\n# Test cases\nprint(decimal_to_binary(15))  # returns \"db1111db\"\nprint(decimal_to_binary(32))  # returns \"db100000db\""], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/80", "response_candidates": ["def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(2, len(s) - 2):\n        if s[i] == s[i-1] or s[i] == s[i+1]:\n            return False\n    return True"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/81", "response_candidates": ["def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/82", "response_candidates": ["def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/83", "response_candidates": ["```python\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n```"], "code_candidates": [{"code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2, 3, 4], "case_status": ["1", "18", "180", "1800", "18000"], "question_quality": "0"}]}
{"name": "HumanEval/84", "response_candidates": ["def solve(N):\n    binary_sum = 0\n    while N > 0:\n        binary_sum = binary_sum + N % 2\n        N = N // 2\n    return bin(binary_sum)[2:]\n\n\n# Test cases\nprint(solve(1000)) # Output: \"1\"\nprint(solve(150))  # Output: \"110\"\nprint(solve(147))  # Output: \"1100\""], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/85", "response_candidates": ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/86", "response_candidates": ["def anti_shuffle(s):\n    words = s.split()\n    result = \"\"\n    for word in words:\n        sorted_word = \"\".join(sorted(word))\n        result += \" \" + sorted_word\n    return result.strip()"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/87", "response_candidates": ["def get_row(lst, x):\n    result = []\n    for row in lst:\n        count = row.count(x)\n        for i in range(count):\n            result.append((i, row.index(x)))\n    result.sort()\n    return result\n\n# Test cases\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))\nprint(get_row([], 1))\nprint(get_row([[], [1], [1, 2, 3]], 3))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/88", "response_candidates": ["def sort_array(array):\n    first_last_sum = sum(array[0], array[-1])\n    if first_last_sum % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n\nprint(sort_array([])) # []\nprint(sort_array([5])) # [5]\nprint(sort_array([2, 4, 3, 0, 1, 5])) # [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6])) # [6, 5, 4, 3, 2, 1, 0]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/89", "response_candidates": ["def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n            if char.lower() == 'z':\n                shift = 0\n           "], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/90", "response_candidates": ["def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    if lst[1] == lst[2]:\n        return None\n    else:\n        return lst[1]\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5])) # == 2\nprint(next_smallest([5, 1, 4, 3, 2])) # == 2\nprint(next_smallest([])) # == None\nprint(next_smallest([1, 1])) # == None"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/91", "response_candidates": ["def is_bored(S):\n    bored_count = 0\n    sentences = [s.strip() for s in re.split('([.!?])', S)]\n    for sentence in sentences:\n        if sentence.lower().startswith('i'):\n            bored_count += 1\n    return bored_count\n\n# Test cases\nprint(is_bored(\"Hello world\")) # 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\")) # 1\nprint(is_bored(\"I am bored. This is a boring day.\")) # 1\nprint(is_bored(\"I am not bored. This is an interesting day.\")) # 0"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/92", "response_candidates": ["def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and \\\n           ((x == y + z) or (x == z + y) or (y == z + x))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/93", "response_candidates": ["def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in \"aeiou\":\n                result += chr((ord(char) - ord('a') - 1) % 26 + ord('a'))\n            else:\n                result += char\n        else:\n            result += char\n    return result\n\n\nprint(encode('test'))\nprint(encode('This is a message'))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/94", "response_candidates": ["Here is the Python3 code for the problem:\n\n```python\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value and return the sum"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/95", "response_candidates": ["def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all(k.lower() in keys for k in keys):\n        return True\n    elif all(k.upper() in keys for k in keys):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })) # True"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/96", "response_candidates": ["def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes\n\n\nprint(count_up_to(5))  # [2, 3]\nprint(count_up_to(11))  # [2, 3, 5, 7]\nprint(count_up_to(0))  # []\nprint(count_up_to(20))  # [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # []\nprint(count_up_to(18))  # [2, 3, 5, 7, 11, 13, 17]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/97", "response_candidates": ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/98", "response_candidates": ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    upper_vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char in upper_vowels:\n            count += 1\n    return count"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/99", "response_candidates": ["def closest_integer(value):\n    import math\n\n    # Convert the string to a float\n    num = float(value)\n\n    # Round the number to the nearest integer\n    rounded_num = math.floor(num) if num < 0 else math.ceil(num)\n\n    return rounded_num\n\n\n# Test cases\nprint(closest_integer(\"10\"))\nprint(closest_integer(\"15.3\"))\nprint(closest_integer(\"14.5\"))\nprint(closest_integer(\"-14.5\"))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/100", "response_candidates": ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    while n % 2 == 0:\n        n += 1\n    for _ in range(2, n, 2):\n        pile.append(_)\n    return pile\n\n\n# Test cases\nprint(make_a_pile(3))  # [3, 5, 7]\nprint(make_a_pile(4))  # [4, 6, 8, 10]\nprint(make_a_pile(5))  # [5, 7, 9, 11, 13]\nprint(make_a_pile(6))  # [6, 8, 10, 12, 14, 16]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/101", "response_candidates": ["def words_string(s):\n    return s.split()"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/102", "response_candidates": ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    result = -1\n    for i in range(y, x - 1, -2):\n        if i % 2 == 0:\n            result = i\n            break\n    return result"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/103", "response_candidates": ["def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m+1)) / (m - n + 1)\n        return bin(int(avg))\n\nprint(rounded_avg(1, 5))  # \"0b11\"\nprint(rounded_avg(7, 5))  # -1\nprint(rounded_avg(10, 20))  # \"0b1111\"\nprint(rounded_avg(20, 33))  # \"0b11010\""], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/104", "response_candidates": ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if not any(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/105", "response_candidates": ["def by_length(arr):\n    def digit_to_name(num):\n        if 1 <= num <= 9:\n            return \"One\" if num == 1 else (\n                \"Two\" if num == 2 else \"Three\" if num == 3 else\n                \"Four\" if num == 4 else \"Five\" if num == 5 else\n                \"Six\" if num == 6 else \"Seven\" if num == 7 else\n                \"Eight\" if num == 8 else \"Nine\"\n            )\n        else:\n            return \"\"\n\n    result = []\n    for num in sorted(arr[1:]+arr[0]):\n        if digit_to_name(num):\n            result.append(digit_to_name(num))\n   "], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/106", "response_candidates": ["def f(n):\n    def factorial(i):\n        if i == 0:\n            return 1\n        else:\n            return i * factorial(i-1)\n\n    def sum_numbers(i):\n        return sum(range(1, i+1))\n\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result\n\n# Test cases\nprint(f(5)) # == [1, 2, 6, 24, 15]\nprint(f(3)) # == [1, 2, 6]\nprint(f(4)) # == [1, 2, 6, 24]\nprint(f(0)) # == []"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/107", "response_candidates": ["def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/108", "response_candidates": ["def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(n) if d != '0')\n\n    return sum(1 for num in arr if sum_digits(num) > 0)\n\nprint(count_nums([])) #== 0\nprint(count_nums([-1, 11, -11])) #== 1\nprint(count_nums([1, 1, 2])) #== 3"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/109", "response_candidates": ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index."], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/110", "response_candidates": ["def exchange(lst1, lst2):\n    def is_all_even(lst):\n        return all(num % 2 == 0 for num in lst)\n\n    def is_odd_or_no_elements(lst):\n        return len(lst) == 0 or all(num % 2 != 0 for num in lst)\n\n    return \"YES\" if is_all_even(lst1) and is_odd_or_no_elements(lst2) or is_all_even(lst2) and is_odd_or_no_elements(lst1) else \"NO\""], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/111", "response_candidates": ["def histogram(test):\n    result = {}\n    for letter in test:\n        result[letter] = result.get(letter, 0) + 1\n    max_count = max(result.values())\n    return {key: value for key, value in result.items() if value == max_count}"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/112", "response_candidates": ["def reverse_delete(s, c):\n    result = \"\".join([i for i in s if i not in c])\n    return (result, result == result[::-1])\n\n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\")) # should return ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\")) # should return ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\")) # should return ('cdedc', True)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/113", "response_candidates": ["def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements in the string {} of the input.\".format(count))\n    return result\n\nprint(odd_count(['1234567']))\nprint(odd_count(['3',\"11111111\"]))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/114", "response_candidates": ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    min_sum = nums[0]\n    current_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = current_sum + num\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n    return min_sum"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/115", "response_candidates": ["def max_fill(grid, capacity):\n    import math\n    rows, cols = len(grid), len(grid[0])\n    dp = [[0] * (cols + 1) for _ in range(rows + 1)]\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                dp[i + 1][j + 1] = min(dp[i][j + 1], dp[i + 1][j]) +"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/116", "response_candidates": ["def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\nprint(sort_array([1, 5, 2, 3, 4]))\nprint(sort_array([-2, -3, -4, -5, -6]))\nprint(sort_array([1, 0, 2, 3, 4]))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/117", "response_candidates": ["def select_words(s, n):\n    if not s:\n        return []\n\n    words = s.split()\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    result = []\n\n    for word in words:\n        count = sum(1 for letter in word if letter.lower() in consonants)\n        if count == n:\n            result.append(word)\n\n    return result\n\n# Test cases\nprint(select_words(\"Mary had a little lamb\", 4)) #==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3)) #==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2)) #==> []\nprint(select_words(\"Hello world\", 4)) #==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3)) #==> [\"Uncle\"]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/118", "response_candidates": ["def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and not word[i - 1].lower() in vowels and not word[i + 1].lower() in vowels:\n            return word[i]\n    return ''\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\")) # \"u\"\nprint(get_closest_vowel(\"FULL\"))   # \"U\"\nprint(get_closest_vowel(\"quick\"))  # \"\"\nprint(get_closest_vowel(\"ab\"))     # \"\""], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/119", "response_candidates": ["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    s1, s2 = lst\n    count1 = 0\n    count2 = 0\n    for i in s1:\n        if i == '(':\n            count1 += 1\n    for i in s2:\n        if i == ')':\n            count2 += 1\n    if count1 != count2:\n        return 'No'\n    if count1 == 0:\n        return 'Yes'\n    stack = []\n    for i in s1:\n        if"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/120", "response_candidates": ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/121", "response_candidates": ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/122", "response_candidates": ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i, x in enumerate(arr[:k]) if x < 1000 or i > k)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/123", "response_candidates": ["def get_odd_collatz(n):\n    def collatz(n):\n        result = []\n        while n != 1:\n            if n % 2 != 0:\n                result.append(n)\n            n = n % 2 == 0 ? n // 2 : 3 * n + 1\n        result.append(1)\n        return result[::-1]\n\n    collatz_sequence = collatz(n)\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)\n\n# Test cases\nprint(get_odd_collatz(5))  # returns [1, 5]\nprint(get_odd_collatz(13))  # returns [13]\nprint(get_odd_collatz(1))  # returns [1]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/124", "response_candidates": ["Here is the Python3 code for the `valid_date` function:\n\n```python\nimport re\n\ndef valid_date(date):\n    # Check if date is not empty\n    if not date:\n        return False\n\n    # Check if date is in the correct format\n    if not re.match(\"^\\d{2}-\\d{2}-\\d{4}$\", date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if day is valid for the month\n    if month in (1, 3,"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/125", "response_candidates": ["def split_words(txt):\n    import re\n    import string\n\n    if re.search(r'\\s', txt):\n        return re.split(r'\\s', txt)\n    elif re.search(r',', txt):\n        return re.split(r',', txt)\n    else:\n        return sum(1 for c in txt if c.lower() in string.ascii_lowercase and (ord(c) - ord('a')) % 2 == 1)\n\n# Test cases\nprint(split_words(\"Hello world!\"))\nprint(split_words(\"Hello,world!\"))\nprint(split_words(\"abcdef\"))\nprint(split_words(\"Hello\"))\nprint(split_words(\"Hello,world\"))\nprint(split_words(\"Hello,world!123\"))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/126", "response_candidates": ["def is_sorted(lst):\n    return lst == sorted(lst)\n\n# Test cases\nprint(is_sorted([5])) # True\nprint(is_sorted([1, 2, 3, 4, 5])) # True\nprint(is_sorted([1, 3, 2, 4, 5])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) # False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) # True\nprint(is_sorted([1, 2, 2, 2,"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/127", "response_candidates": ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/128", "response_candidates": ["def prod_signs(arr):\n    if not arr:\n        return None\n\n    positive_product = 1\n    negative_product = 1\n    zero_product = 1\n\n    for num in arr:\n        if num > 0:\n            positive_product *= num\n        elif num < 0:\n            negative_product *= num\n        else:\n            zero_product *= num\n\n    return abs(positive_product) * abs(negative_product) * abs(zero_product)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/129", "response_candidates": ["```python\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/130", "response_candidates": ["def tri(n):\n    sequence = [3, 2]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence[:n+1]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/131", "response_candidates": ["```python\ndef digits(n):\n    product = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digit = True\n    return 0 if not has_odd_digit else product\n```"], "code_candidates": [{"code": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digit = True\n    return 0 if not has_odd_digit else product", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2, 3, 4, 5], "case_status": ["5", "5", "5", "315", "2625", "0"], "question_quality": "0"}]}
{"name": "HumanEval/132", "response_candidates": ["def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[' or stack.pop() != '[':\n                return False\n    return not stack\n\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/133", "response_candidates": ["def sum_squares(lst):\n    return sum(int(x)**2 for x in lst if isinstance(x, int))\n\nprint(sum_squares([1,2,3])) # 14\nprint(sum_squares([1,4,9])) # 98\nprint(sum_squares([1,3,5,7])) # 84\nprint(sum_squares([1.4,4.2,0])) # 29\nprint(sum_squares([-2.4,1,1])) # 6"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/134", "response_candidates": ["def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char in \" \".join(txt.split()):\n        return True\n    return False\n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/135", "response_candidates": ["def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n# Test cases\nprint(can_arrange([1, 2, 4, 3, 5])) # Should return 3\nprint(can_arrange([1, 2, 3])) # Should return -1\nprint(can_arrange([5, 4, 3, 2, 1])) # Should return 4\nprint(can_arrange([5, 4, 3, 2, 1, 1])) # Should return -1"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/136", "response_candidates": ["def largest_smallest_integers(lst):\n    neg_nums = [i for i in lst if i < 0]\n    pos_nums = [i for i in lst if i > 0]\n    return (None if len(neg_nums) == 0 else max(neg_nums), None if len(pos_nums) == 0 else min(pos_nums))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/137", "response_candidates": ["def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \"\").strip())\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \"\").strip())\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    if isinstance(a, str) and isinstance(b, str):\n        if a > b:\n            return b\n        elif a < b:\n            return a\n    if isinstance(a, float) and isinstance(b, str):\n        return b\n    if isinstance(a, str) and isinstance(b, float):\n        return a\n    if a == b:\n        return None\n\nprint(compare_one(1, 2.5)) # \u279e 2.5\nprint(compare_one(1, \"2,3\")) # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\")) # \u279e \"6\"\nprint(compare_one(\"1\", 1)) # \u279e None\nprint(compare_one(\"2,3\", 1.5)) # \u279e \"2,3\""], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/138", "response_candidates": ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 != 0:\n        return False\n    factors = []\n    for i in range(2, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    factors.sort()\n    if sum(factors) == n:\n        return True\n    return False\n\n# Test cases\nprint(is_equal_to_sum_even(4)) # False\nprint(is_equal_to_sum_even(6)) # False\nprint(is_equal_to_sum_even(8)) # True\nprint(is_equal_to_sum_even(10)) # False"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/139", "response_candidates": ["def special_factorial(n):\n    if n < 1:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test cases\nprint(special_factorial(4)) # 288\nprint(special_factorial(5)) # 34560"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/140", "response_candidates": ["def fix_spaces(text):\n    return text.replace(' ', '_')\n\n# Test cases\nprint(fix_spaces(\"Example\")) # \"Example\"\nprint(fix_spaces(\"Example 1\")) # \"Example_1\"\nprint(fix_spaces(\" Example 2\")) # \"_Example_2\"\nprint(fix_spaces(\" Example   3\")) # \"_Example-3\""], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/141", "response_candidates": ["def file_name_check(file_name):\n    if '.' not in file_name:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name.isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if len(name.replace('.', '')) > 3:\n        return 'No'\n    return 'Yes'"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/142", "response_candidates": ["def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        if i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/143", "response_candidates": ["def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\n# Test cases\nprint(words_in_sentence(\"This is a test\")) # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\")) # Output: \"go for\""], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/144", "response_candidates": ["def simplify(x, n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def reduce(x):\n        x = x.split('/')\n        numerator, denominator = int(x[0]), int(x[1])\n        while denominator != 1 and gcd(denominator, denominator) != 1:\n            denominator = gcd(denominator, denominator)\n        return str(numerator // denominator) + '/' + str(denominator)\n\n    return reduce(x) == reduce(n)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/145", "response_candidates": ["def order_by_points(nums):\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    nums.sort(key=sum_digits)\n    return nums\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))\nprint(order_by_points([1, 11, -1, -11, -12, -111, 111]))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/146", "response_candidates": ["def specialFilter(nums):\n    count = 0\n    for num in nums:\n        str_num = str(abs(num))\n        if num < 0 and str_num[0] == str_num[-1]:\n            if int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:\n                count += 1\n    return count"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/147", "response_candidates": ["def get_max_triples(n):\n    def is_multiple_of_three(x):\n        return x % 3 == 0\n\n    def get_triples(a):\n        triples = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                for k in range(j + 1, len(a)):\n                    if is_multiple_of_three(a[i] + a[j] + a[k]):\n                        triples += 1\n        return triples\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return get_triples(a)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/148", "response_candidates": ["def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1 = planets.index(planet1)\n    planet2 = planets.index(planet2)\n    if planet1 < planet2:\n        result = []\n        for i in range(planet1 + 1, planet2):\n            result.append(planets[i])\n        return tuple(result)\n    else:\n        return tuple()\n\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/149", "response_candidates": ["def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    def word_length(word):\n        return len(word)\n\n    lst = [word for word in lst if word_length(word) % 2 == 0]\n    lst.sort(key=word_length)\n    return lst\n\n# Test cases\nprint(sorted_list_sum([\""], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/150", "response_candidates": ["```python\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if is_prime(n):\n        return x\n    return y\n```"], "code_candidates": [{"code": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if is_prime(n):\n        return x\n    return y", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "case_status": ["34", "5", "33", "3", "-1", "583", "129", "1234", "0", "2"], "question_quality": "0"}]}
{"name": "HumanEval/151", "response_candidates": ["def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\n    If the input list is empty, return 0.\n    \"\"\"\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            if num % 2 == 1:\n                result += num ** 2\n    return result"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/152", "response_candidates": ["def compare(game, guess):\n    return [abs(g - g) for g in guess]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/153", "response_candidates": ["def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return ord(ext[0].upper()) - ord(ext[0].lower())\n\n    strongest = max(extensions, key=strength)\n    return f'{class_name}.{strongest}'\n\n# Test cases\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # my_class.AA\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Slices.SErviNGSliCes"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/154", "response_candidates": ["def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    def get_rotations(word):\n        return [word[i:] + word[:i] for i in range(len(word))]\n\n    for i in range(len(b)):\n        if b in a or any(rotation in a for rotation in get_rotations(b)):\n            return True\n\n    return False"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/155", "response_candidates": ["def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    even_digits = 0\n    odd_digits = 0\n\n    num = abs(num)\n\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n            even_digits += 1\n        else:\n            odd_count += 1\n            odd_digits += 1\n\n    return (even_digits, odd_digits)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/156", "response_candidates": ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    values = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n       \n    symbols = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n        \n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // values[i]):\n            roman_num += symbols[i]\n            number -= values[i]\n        i += 1\n    return roman_num\n\n\nprint(int_to_mini_roman(19) == 'xix')\nprint(int_to_mini_roman(152) == 'cl"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/157", "response_candidates": ["def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    # Check if the sum of the squares of any two sides is equal to the square of the third side\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5)) # True\nprint(right_angle_triangle(1, 2, 3)) # False\nprint(right_angle_triangle(3, 4, 6)) # True\nprint(right_angle_triangle(4, 5, 12)) # True\nprint(right_angle_triangle(7, 24, 25)) # True\nprint(right_angle_triangle(3, 3, 3)) # False (equilateral triangle)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/158", "response_candidates": ["def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    def compare(a, b):\n        if count_unique_chars(a) == count_unique_chars(b):\n            return a < b\n        return count_unique_chars(a) > count_unique_chars(b)\n\n    words.sort(key=lambda x: (count_unique_chars(x), x))\n    return words[0]\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"])) # \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"])) # \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])) # \"aaaaaaa\""], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/159", "response_candidates": ["def eat(number, need, remaining):\n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/160", "response_candidates": ["def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        result = eval(f\"{result}{operator[i]}{operand[i+1]}\")\n    return result\n\n# Example usage\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)\nprint(result) # Output: 9"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/161", "response_candidates": ["def solve(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result[::-1]\n\n# Test cases\nprint(solve(\"1234\") == \"4321\")\nprint(solve(\"ab\") == \"AB\")\nprint(solve(\"#a@C\") == \"#A@c\")"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
{"name": "HumanEval/162", "response_candidates": ["```python\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\nprint(string_to_md5('Hello world'))\n```"], "code_candidates": [{"code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\nprint(string_to_md5('Hello world'))", "prompt_ask_q": false, "index": 0, "passed_case": [0, 1, 2, 3], "case_status": ["3e25960a79dbc69b674cd4ec67a72c62", "None", "0ef78513b0cb8cef12743f5aeb35f888", "5f4dcc3b5aa765d61d8327deb882cf99"], "question_quality": "0"}]}
{"name": "HumanEval/163", "response_candidates": ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    result = []\n    for i in range(a, b+1):\n        for digit in str(i):\n            if int(digit) % 2 == 0:\n                result.append(int(digit))\n    return sorted(result)"], "code_candidates": [{"code": "", "prompt_ask_q": true, "index": 0, "passed_case": "", "case_status": "", "question_quality": "0"}]}
