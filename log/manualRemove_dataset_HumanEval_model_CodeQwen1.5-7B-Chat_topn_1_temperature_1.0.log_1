{"key": "HumanEval/0_prompt", "name": "HumanEval/0", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/1_prompt", "name": "HumanEval/1", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(\"\".join(current_group))\n                current_group = []\n\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/2_prompt", "name": "HumanEval/2", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/3_prompt", "name": "HumanEval/3", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/4_prompt", "name": "HumanEval/4", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0  # Return 0 for an empty list\n\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/5_prompt", "name": "HumanEval/5", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result += [delimeter, num]\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/6_prompt", "name": "HumanEval/6", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/7_prompt", "name": "HumanEval/7", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/8_prompt", "name": "HumanEval/8", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/9_prompt", "name": "HumanEval/9", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    return max_list\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/10_prompt", "name": "HumanEval/10", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/11_prompt", "name": "HumanEval/11", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join('1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/12_prompt", "name": "HumanEval/12", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = max(strings, key=len)\n    return longest_str\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/13_prompt", "name": "HumanEval/13", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/14_prompt", "name": "HumanEval/14", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/15_prompt", "name": "HumanEval/15", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/16_prompt", "name": "HumanEval/16", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/17_prompt", "name": "HumanEval/17", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Split the input string into individual notes\n    notes = music_string.split()\n\n    # Initialize an empty list to store the number of beats for each note\n    beats = []\n\n    # Iterate over each note in the input string\n    for note in notes:\n        # Determine the number of beats for the current note based on its ASCII representation\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n\n    # Return the list of beats for each note\n    return beats\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/18_prompt", "name": "HumanEval/18", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/19_prompt", "name": "HumanEval/19", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)\n\n# Test the function\nprint(sort_numbers('three one five'))  # Output: 'one three five'\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/20_prompt", "name": "HumanEval/20", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/21_prompt", "name": "HumanEval/21", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/22_prompt", "name": "HumanEval/22", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/23_prompt", "name": "HumanEval/23", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/24_prompt", "name": "HumanEval/24", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/25_prompt", "name": "HumanEval/25", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/26_prompt", "name": "HumanEval/26", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/27_prompt", "name": "HumanEval/27", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/28_prompt", "name": "HumanEval/28", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/29_prompt", "name": "HumanEval/29", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/30_prompt", "name": "HumanEval/30", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef get_positive(l: list):\n    return [num for num in l if num > 0]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/31_prompt", "name": "HumanEval/31", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/32_prompt", "name": "HumanEval/32", "prompt_type": "prompt", "index": 0, "response": "```python3\nimport math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/33_prompt", "name": "HumanEval/33", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sort_third(l: list):\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the extracted elements\n    divisible_by_three.sort()\n    \n    # Create a new list l' with the same elements as l\n    l_prime = l[:]\n    \n    # Replace the elements at indices divisible by 3 in l' with the sorted elements\n    for i in range(len(divisible_by_three)):\n        l_prime[i * 3] = divisible_by_three[i]\n    \n    return l_prime\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/34_prompt", "name": "HumanEval/34", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/35_prompt", "name": "HumanEval/35", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/36_prompt", "name": "HumanEval/36", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/37_prompt", "name": "HumanEval/37", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    result = l[:]\n    for i, value in enumerate(even_indices):\n        result[2*i] = value\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/38_prompt", "name": "HumanEval/38", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/39_prompt", "name": "HumanEval/39", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef prime_fib(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num: int) -> int:\n        a, b = 0, 1\n        for _ in range(num):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/40_prompt", "name": "HumanEval/40", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] +", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/41_prompt", "name": "HumanEval/41", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n ** 2\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/42_prompt", "name": "HumanEval/42", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/43_prompt", "name": "HumanEval/43", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/44_prompt", "name": "HumanEval/44", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef change_base(x: int, base: int) -> str:\n    if base >= 10 or base < 2:\n        raise ValueError(\"Base must be less than 10 and greater than 1\")\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/45_prompt", "name": "HumanEval/45", "prompt_type": "prompt", "index": 0, "response": "```python\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/46_prompt", "name": "HumanEval/46", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Initialize the first four Fib4 numbers\n    fib4_nums = [0, 0, 2, 0]\n\n    # Compute the next Fib4 numbers up to n\n    for i in range(4, n + 1):\n        next_fib4 = sum(fib4_nums)\n        fib4_nums.pop(0)  # Remove the oldest Fib4 number\n        fib4_nums.append(next_fib4)  # Add the newest Fib4 number\n\n    # Return the n-th Fib4 number\n    return fib4_nums[-1]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/47_prompt", "name": "HumanEval/47", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/48_prompt", "name": "HumanEval/48", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/49_prompt", "name": "HumanEval/49", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base ** 2) % p\n        n = n // 2\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/50_prompt", "name": "HumanEval/50", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/51_prompt", "name": "HumanEval/51", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/52_prompt", "name": "HumanEval/52", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef below_threshold(l: list, t: int) -> bool:\n    return all(i < t for i in l)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/53_prompt", "name": "HumanEval/53", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/54_prompt", "name": "HumanEval/54", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/55_prompt", "name": "HumanEval/55", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/56_prompt", "name": "HumanEval/56", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/57_prompt", "name": "HumanEval/57", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/58_prompt", "name": "HumanEval/58", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert lists to sets to remove duplicates and find common elements\n    common_elements = set(l1).intersection(set(l2))\n    # Return sorted list of common elements\n    return sorted(list(common_elements))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/59_prompt", "name": "HumanEval/59", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/60_prompt", "name": "HumanEval/60", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/61_prompt", "name": "HumanEval/61", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/62_prompt", "name": "HumanEval/62", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/63_prompt", "name": "HumanEval/63", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fibfib(n: int) -> int:\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/64_prompt", "name": "HumanEval/64", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s.endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))  # Output: 3\nprint(vowels_count(\"rhythm\"))  # Output: 0\nprint(vowels_count(\"SYZYGY\"))  # Output: 1\nprint(vowels_count(\"quickly\"))  # Output: 2\nprint(vowels_count(\"\"))  # Output: 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/65_prompt", "name": "HumanEval/65", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x = str(x)\n    shift = shift % len(x)\n    return x[-shift:] + x[:-shift]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/66_prompt", "name": "HumanEval/66", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/67_prompt", "name": "HumanEval/67", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fruit_distribution(s,n):\n    # Split the string into two parts\n    parts = s.split()\n    # Convert the number of apples and oranges to integers\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/68_prompt", "name": "HumanEval/68", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    index = -1\n\n    # Iterate through the array to find the smallest even value and its index\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n\n    # If an even value was found, return", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/69_prompt", "name": "HumanEval/69", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    max_val = -1\n    for num, count in freq.items():\n        if num <= count and num > max_val:\n            max_val = num\n    \n    return max_val\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/70_prompt", "name": "HumanEval/70", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/71_prompt", "name": "HumanEval/71", "prompt_type": "prompt", "index": 0, "response": "```python3\nimport math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/72_prompt", "name": "HumanEval/72", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/73_prompt", "name": "HumanEval/73", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef smallest_change(arr):\n    changes = 0\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/74_prompt", "name": "HumanEval/74", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    # Compare the total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/75_prompt", "name": "HumanEval/75", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 101) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Test the function\nprint(is_multiply_prime(30))  # Output: True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/76_prompt", "name": "HumanEval/76", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/77_prompt", "name": "HumanEval/77", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a**(1/3).is_integer()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/78_prompt", "name": "HumanEval/78", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count the number of prime hexadecimal digits in the input string\n    prime_count = sum(1 for digit in num if digit in prime_hex_digits)\n    \n    return prime_count\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/79_prompt", "name": "HumanEval/79", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/80_prompt", "name": "HumanEval/80", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/81_prompt", "name": "HumanEval/81", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        ", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/82_prompt", "name": "HumanEval/82", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/83_prompt", "name": "HumanEval/83", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 18 * (10 ** (n - 2))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/84_prompt", "name": "HumanEval/84", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef solve(N):\n    # Initialize the sum of digits to 0\n    sum_of_digits = 0\n    \n    # Loop through each digit in N\n    while N > 0:\n        # Add the last digit of N to the sum\n        sum_of_digits += N % 10\n        \n        # Remove the last digit from N\n        N //= 10\n    \n    # Convert the sum of digits to binary and return it\n    return bin(sum_of_digits)[2:]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/85_prompt", "name": "HumanEval/85", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/86_prompt", "name": "HumanEval/86", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/87_prompt", "name": "HumanEval/87", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row[::-1]):  # Reverse the row to sort by columns in descending order\n            if num == x:\n                result.append((i, len(row) - 1 - j))  # Calculate the column index in the original row\n    result.sort(key=lambda x: (x[0], -x[1]))  # Sort by rows in ascending order and columns in descending order\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/88_prompt", "name": "HumanEval/88", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sort_array(array):\n    if not array:\n        return []\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/89_prompt", "name": "HumanEval/89", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/90_prompt", "name": "HumanEval/90", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/91_prompt", "name": "HumanEval/91", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    sentences = S.split('.')\n    boredoms = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            boredoms += 1\n    return boredoms\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/92_prompt", "name": "HumanEval/92", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/93_prompt", "name": "HumanEval/93", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the index of the vowel in the vowels string\n                index = vowels.index(char.lower())\n                # Find the vowel 2 places ahead in the vowels string\n                new_vowel = vowels[(index + 2) % len(vowels)]\n                # Swap case and replace the vowel\n                encoded_message += new_vowel.swapcase()\n            else:\n                # Swap case for consonants\n                encoded_message += char.swapcase()\n        else:\n            # Keep non-alphabetic characters as they are\n            encoded_message += char\n    return encoded_message\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/94_prompt", "name": "HumanEval/94", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/95_prompt", "name": "HumanEval/95", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    lower_case = upper_case = None\n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            return False\n        if lower_case is None and upper_case is None:\n            lower_case = key.islower()\n            upper_case = key.isupper()\n        else:\n            if lower_case and not key.islower():\n                return False\n            if upper_case and not key.isupper():\n                return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/96_prompt", "name": "HumanEval/96", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/97_prompt", "name": "HumanEval/97", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/98_prompt", "name": "HumanEval/98", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/99_prompt", "name": "HumanEval/99", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num > 0 and num - int(num) == 0.5:\n        return int(num) + 1\n    elif num < 0 and num - int(num) == -0.5:\n        return int(num) - 1\n    else:\n        return round(num)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/100_prompt", "name": "HumanEval/100", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef make_a_pile(n):\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 2\n        pile.append(n)\n    return pile\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/101_prompt", "name": "HumanEval/101", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef words_string(s):\n    # Split the string by commas and spaces\n    words = s.replace(',', ' ').split()\n    return words\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/102_prompt", "name": "HumanEval/102", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    else:\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n        return -1\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/103_prompt", "name": "HumanEval/103", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/104_prompt", "name": "HumanEval/104", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Filter out numbers with even digits\n    unique_numbers = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Return the sorted list of unique numbers\n    return sorted(unique_numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/105_prompt", "name": "HumanEval/105", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef by_length(arr):\n    # Filter out numbers not between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    filtered_arr.sort()\n    \n    # Reverse the sorted array\n    filtered_arr.reverse()\n    \n    # Map each number to its corresponding name\n    name_mapping = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", ", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/106_prompt", "name": "HumanEval/106", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef f(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/107_prompt", "name": "HumanEval/107", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/108_prompt", "name": "HumanEval/108", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/109_prompt", "name": "HumanEval/109", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    \n    return False\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/110_prompt", "name": "HumanEval/110", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef exchange(lst1, lst2):\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    \n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/111_prompt", "name": "HumanEval/111", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef histogram(test):\n    if not test:\n        return {}\n    test = test.split()\n    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/112_prompt", "name": "HumanEval/112", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef reverse_delete(s,c):\n    s = s.replace(''.join(c), '')\n    return (s, s == s[::-1])\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/113_prompt", "name": "HumanEval/113", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = sum(1 for char in string if int(char) % 2 == 1)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/114_prompt", "name": "HumanEval/114", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/115_prompt", "name": "HumanEval/115", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef max_fill(grid, capacity):\n    import math\n    # Calculate the total number of water units in each column\n    column_water = [sum(row[i] for row in grid) for i in range(len(grid[0]))]\n    \n    # Calculate the number of times buckets need to be lowered\n    lowerings = math.ceil(max(column_water) / capacity)\n    \n    return lowerings\n``", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/116_prompt", "name": "HumanEval/116", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/117_prompt", "name": "HumanEval/117", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/118_prompt", "name": "HumanEval/118", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/119_prompt", "name": "HumanEval/119", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Check if the sum of the lengths of the two strings is even\n    if (len(lst[0]) + len(lst[1])) % 2 != 0:\n        return 'No'\n\n    # Check if the first string has more closing parentheses than opening ones\n    if lst[0].", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/120_prompt", "name": "HumanEval/120", "prompt_type": "prompt", "index": 0, "response": "```python3\nclass Solution:\n    def maximum(self, arr: List[int], k: int) -> List[int]:\n        return sorted(arr, reverse=True)[:k]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/121_prompt", "name": "HumanEval/121", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/122_prompt", "name": "HumanEval/122", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef add_elements(arr, k):\n    return sum(num for num in arr[:k] if 0 < num < 100)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/123_prompt", "name": "HumanEval/123", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Add 1 as it is always the last odd number in the sequence\n    return sorted(odd_numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/124_prompt", "name": "HumanEval/124", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date string is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Extract the month, day, and year from the date string\n    month, day, year = date.split('-')\n\n    # Check if the month is valid\n    if not month.isdigit() or int(month) < 1 or int(month) > 12:\n        return False\n\n    # Check if the day is valid\n    if not day.isdigit() or int(day) < 1:\n        return False\n\n    #", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/125_prompt", "name": "HumanEval/125", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/126_prompt", "name": "HumanEval/126", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/127_prompt", "name": "HumanEval/127", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef intersection(interval1, interval2):\n    # Calculate the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If the intersection is empty, return \"NO\"\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"Y", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/128_prompt", "name": "HumanEval/128", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n            sum_of_magnitudes = 0\n            break\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product_of_signs\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/129_prompt", "name": "HumanEval/129", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom collections import deque\n\ndef minPath(grid, k):\n    N =", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/130_prompt", "name": "HumanEval/130", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        sequence = [3, 1]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        return sequence\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/131_prompt", "name": "HumanEval/131", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/132_prompt", "name": "HumanEval/132", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) > 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/133_prompt", "name": "HumanEval/133", "prompt_type": "prompt", "index": 0, "response": "```python3\nimport math\n\ndef sum_squares(lst):\n    return sum(math.ceil(i)**2 for i in lst)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/134_prompt", "name": "HumanEval/134", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if txt[-1].isalpha():\n        if len(txt) == 1 or txt[-2] == \" \":\n            return True\n    return False\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/135_prompt", "name": "HumanEval/135", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/136_prompt", "name": "HumanEval/136", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/137_prompt", "name": "HumanEval/137", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef compare_one(a, b):\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/138_prompt", "name": "HumanEval/138", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n >= 8\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/139_prompt", "name": "HumanEval/139", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef special_factorial(n):\n    factorial = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        factorial *= i\n        special_fact *= factorial\n    return special_fact\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/140_prompt", "name": "HumanEval/140", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 2:\n                result.append(\"-\")\n            elif consecutive_spaces > 0:\n                result.extend([\"_\"] * consecutive_spaces)\n            result.append(char)\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result.append(\"-\")\n    elif consecutive_spaces > 0:\n        result.extend([\"_\"] * consecutive_spaces)\n    return \"\".join(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/141_prompt", "name": "HumanEval/141", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef file_name_check(file_name):\n    # Check if there are more than three digits in the file name\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    \n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts before and after the dot\n    name_part, extension_part = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a latin alphapet letter\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    \n    # Check if the extension part is one of the allowed extensions\n    if extension_part not in ['txt', 'exe', 'd", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/142_prompt", "name": "HumanEval/142", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/143_prompt", "name": "HumanEval/143", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/144_prompt", "name": "HumanEval/144", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef simplify(x, n):\n    # Split the fractions into numerator and denominator\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n\n    # Calculate the product of the numerators and denominators\n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n\n    # Check if the product is a whole number\n    return product_numerator % product_denominator == 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/145_prompt", "name": "HumanEval/145", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/146_prompt", "name": "HumanEval/146", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef specialFilter(nums):\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_first_last_odd(n):\n        n = abs(n)\n        return is_odd(int(str(n)[0])) and is_odd(int(str(n)[-1]))\n\n    return sum(1 for num in nums if num > 10 and is_first_last_odd(num))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/147_prompt", "name": "HumanEval/147", "prompt_type": "prompt", "index": 0, "response": "```python3\nclass Solution:\n    def get_max_triples(self, n: int) -> int:\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/148_prompt", "name": "HumanEval/148", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/149_prompt", "name": "HumanEval/149", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list by length, then alphabetically\n    even_length_strings.sort(key=lambda x: (len(x), x))\n    \n    return even_length_strings\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/150_prompt", "name": "HumanEval/150", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/151_prompt", "name": "HumanEval/151", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 != 0)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/152_prompt", "name": "HumanEval/152", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef compare(game,guess):\n    return [abs(a-b) for a,b in zip(game,guess)]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/153_prompt", "name": "HumanEval/153", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/154_prompt", "name": "HumanEval/154", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef cycpattern_check(a , b):\n    # Concatenate the first string with itself\n    concat_a = a + a\n    \n    # Check if the second string is a substring of the concatenated string\n    return b in concat_a\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/155_prompt", "name": "HumanEval/155", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num = abs(num)  # Make sure the number is positive\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/156_prompt", "name": "HumanEval/156", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/157_prompt", "name": "HumanEval/157", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides of the triangle in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/158_prompt", "name": "HumanEval/158", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/159_prompt", "name": "HumanEval/159", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/160_prompt", "name": "HumanEval/160", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/161_prompt", "name": "HumanEval/161", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/162_prompt", "name": "HumanEval/162", "prompt_type": "prompt", "index": 0, "response": "```python3\nimport hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/163_prompt", "name": "HumanEval/163", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than b\n    if a > b:\n        a, b = b, a\n\n    # Generate and return the even numbers between a and b\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/0_prompt", "name": "HumanEval/0", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/1_prompt", "name": "HumanEval/1", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(\"\".join(current_group))\n                current_group = []\n\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/2_prompt", "name": "HumanEval/2", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/3_prompt", "name": "HumanEval/3", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/4_prompt", "name": "HumanEval/4", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0  # Return 0 for an empty list\n\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/5_prompt", "name": "HumanEval/5", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result += [delimeter, num]\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/6_prompt", "name": "HumanEval/6", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/7_prompt", "name": "HumanEval/7", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/8_prompt", "name": "HumanEval/8", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/9_prompt", "name": "HumanEval/9", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    return max_list\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/10_prompt", "name": "HumanEval/10", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/11_prompt", "name": "HumanEval/11", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join('1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/12_prompt", "name": "HumanEval/12", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = max(strings, key=len)\n    return longest_str\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/13_prompt", "name": "HumanEval/13", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/14_prompt", "name": "HumanEval/14", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/15_prompt", "name": "HumanEval/15", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/16_prompt", "name": "HumanEval/16", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/17_prompt", "name": "HumanEval/17", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Split the input string into individual notes\n    notes = music_string.split()\n\n    # Initialize an empty list to store the number of beats for each note\n    beats = []\n\n    # Iterate over each note in the input string\n    for note in notes:\n        # Determine the number of beats for the current note based on its ASCII representation\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n\n    # Return the list of beats for each note\n    return beats\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/18_prompt", "name": "HumanEval/18", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/19_prompt", "name": "HumanEval/19", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)\n\n# Test the function\nprint(sort_numbers('three one five'))  # Output: 'one three five'\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/20_prompt", "name": "HumanEval/20", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/21_prompt", "name": "HumanEval/21", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/22_prompt", "name": "HumanEval/22", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/23_prompt", "name": "HumanEval/23", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/24_prompt", "name": "HumanEval/24", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/25_prompt", "name": "HumanEval/25", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/26_prompt", "name": "HumanEval/26", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/27_prompt", "name": "HumanEval/27", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/28_prompt", "name": "HumanEval/28", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/29_prompt", "name": "HumanEval/29", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/30_prompt", "name": "HumanEval/30", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef get_positive(l: list):\n    return [num for num in l if num > 0]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/31_prompt", "name": "HumanEval/31", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/32_prompt", "name": "HumanEval/32", "prompt_type": "prompt", "index": 0, "response": "```python3\nimport math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/33_prompt", "name": "HumanEval/33", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sort_third(l: list):\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the extracted elements\n    divisible_by_three.sort()\n    \n    # Create a new list l' with the same elements as l\n    l_prime = l[:]\n    \n    # Replace the elements at indices divisible by 3 in l' with the sorted elements\n    for i in range(len(divisible_by_three)):\n        l_prime[i * 3] = divisible_by_three[i]\n    \n    return l_prime\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/34_prompt", "name": "HumanEval/34", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/35_prompt", "name": "HumanEval/35", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/36_prompt", "name": "HumanEval/36", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/37_prompt", "name": "HumanEval/37", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    result = l[:]\n    for i, value in enumerate(even_indices):\n        result[2*i] = value\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/38_prompt", "name": "HumanEval/38", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/39_prompt", "name": "HumanEval/39", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef prime_fib(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num: int) -> int:\n        a, b = 0, 1\n        for _ in range(num):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/40_prompt", "name": "HumanEval/40", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] +", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/41_prompt", "name": "HumanEval/41", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n ** 2\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/42_prompt", "name": "HumanEval/42", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/43_prompt", "name": "HumanEval/43", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/44_prompt", "name": "HumanEval/44", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef change_base(x: int, base: int) -> str:\n    if base >= 10 or base < 2:\n        raise ValueError(\"Base must be less than 10 and greater than 1\")\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/45_prompt", "name": "HumanEval/45", "prompt_type": "prompt", "index": 0, "response": "```python\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/46_prompt", "name": "HumanEval/46", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Initialize the first four Fib4 numbers\n    fib4_nums = [0, 0, 2, 0]\n\n    # Compute the next Fib4 numbers up to n\n    for i in range(4, n + 1):\n        next_fib4 = sum(fib4_nums)\n        fib4_nums.pop(0)  # Remove the oldest Fib4 number\n        fib4_nums.append(next_fib4)  # Add the newest Fib4 number\n\n    # Return the n-th Fib4 number\n    return fib4_nums[-1]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/47_prompt", "name": "HumanEval/47", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/48_prompt", "name": "HumanEval/48", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/49_prompt", "name": "HumanEval/49", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base ** 2) % p\n        n = n // 2\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/50_prompt", "name": "HumanEval/50", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/51_prompt", "name": "HumanEval/51", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/52_prompt", "name": "HumanEval/52", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef below_threshold(l: list, t: int) -> bool:\n    return all(i < t for i in l)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/53_prompt", "name": "HumanEval/53", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/54_prompt", "name": "HumanEval/54", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/55_prompt", "name": "HumanEval/55", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/56_prompt", "name": "HumanEval/56", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/57_prompt", "name": "HumanEval/57", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/58_prompt", "name": "HumanEval/58", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert lists to sets to remove duplicates and find common elements\n    common_elements = set(l1).intersection(set(l2))\n    # Return sorted list of common elements\n    return sorted(list(common_elements))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/59_prompt", "name": "HumanEval/59", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/60_prompt", "name": "HumanEval/60", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/61_prompt", "name": "HumanEval/61", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/62_prompt", "name": "HumanEval/62", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/63_prompt", "name": "HumanEval/63", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fibfib(n: int) -> int:\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/64_prompt", "name": "HumanEval/64", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s.endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))  # Output: 3\nprint(vowels_count(\"rhythm\"))  # Output: 0\nprint(vowels_count(\"SYZYGY\"))  # Output: 1\nprint(vowels_count(\"quickly\"))  # Output: 2\nprint(vowels_count(\"\"))  # Output: 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/65_prompt", "name": "HumanEval/65", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x = str(x)\n    shift = shift % len(x)\n    return x[-shift:] + x[:-shift]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/66_prompt", "name": "HumanEval/66", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/67_prompt", "name": "HumanEval/67", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fruit_distribution(s,n):\n    # Split the string into two parts\n    parts = s.split()\n    # Convert the number of apples and oranges to integers\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/68_prompt", "name": "HumanEval/68", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    index = -1\n\n    # Iterate through the array to find the smallest even value and its index\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n\n    # If an even value was found, return", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/69_prompt", "name": "HumanEval/69", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    max_val = -1\n    for num, count in freq.items():\n        if num <= count and num > max_val:\n            max_val = num\n    \n    return max_val\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/70_prompt", "name": "HumanEval/70", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/71_prompt", "name": "HumanEval/71", "prompt_type": "prompt", "index": 0, "response": "```python3\nimport math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/72_prompt", "name": "HumanEval/72", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef will_it_fly(q,w):\n    return sum(q) <= w and q == q[::-1]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/73_prompt", "name": "HumanEval/73", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef smallest_change(arr):\n    changes = 0\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/74_prompt", "name": "HumanEval/74", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    # Compare the total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/75_prompt", "name": "HumanEval/75", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 101) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Test the function\nprint(is_multiply_prime(30))  # Output: True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/76_prompt", "name": "HumanEval/76", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/77_prompt", "name": "HumanEval/77", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a**(1/3).is_integer()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/78_prompt", "name": "HumanEval/78", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count the number of prime hexadecimal digits in the input string\n    prime_count = sum(1 for digit in num if digit in prime_hex_digits)\n    \n    return prime_count\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/79_prompt", "name": "HumanEval/79", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/80_prompt", "name": "HumanEval/80", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/81_prompt", "name": "HumanEval/81", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        ", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/82_prompt", "name": "HumanEval/82", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/83_prompt", "name": "HumanEval/83", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 18 * (10 ** (n - 2))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/84_prompt", "name": "HumanEval/84", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef solve(N):\n    # Initialize the sum of digits to 0\n    sum_of_digits = 0\n    \n    # Loop through each digit in N\n    while N > 0:\n        # Add the last digit of N to the sum\n        sum_of_digits += N % 10\n        \n        # Remove the last digit from N\n        N //= 10\n    \n    # Convert the sum of digits to binary and return it\n    return bin(sum_of_digits)[2:]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/85_prompt", "name": "HumanEval/85", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/86_prompt", "name": "HumanEval/86", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/87_prompt", "name": "HumanEval/87", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row[::-1]):  # Reverse the row to sort by columns in descending order\n            if num == x:\n                result.append((i, len(row) - 1 - j))  # Calculate the column index in the original row\n    result.sort(key=lambda x: (x[0], -x[1]))  # Sort by rows in ascending order and columns in descending order\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/88_prompt", "name": "HumanEval/88", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sort_array(array):\n    if not array:\n        return []\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/89_prompt", "name": "HumanEval/89", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/90_prompt", "name": "HumanEval/90", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/91_prompt", "name": "HumanEval/91", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    sentences = S.split('.')\n    boredoms = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            boredoms += 1\n    return boredoms\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/92_prompt", "name": "HumanEval/92", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/93_prompt", "name": "HumanEval/93", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the index of the vowel in the vowels string\n                index = vowels.index(char.lower())\n                # Find the vowel 2 places ahead in the vowels string\n                new_vowel = vowels[(index + 2) % len(vowels)]\n                # Swap case and replace the vowel\n                encoded_message += new_vowel.swapcase()\n            else:\n                # Swap case for consonants\n                encoded_message += char.swapcase()\n        else:\n            # Keep non-alphabetic characters as they are\n            encoded_message += char\n    return encoded_message\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/94_prompt", "name": "HumanEval/94", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/95_prompt", "name": "HumanEval/95", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    lower_case = upper_case = None\n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            return False\n        if lower_case is None and upper_case is None:\n            lower_case = key.islower()\n            upper_case = key.isupper()\n        else:\n            if lower_case and not key.islower():\n                return False\n            if upper_case and not key.isupper():\n                return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/96_prompt", "name": "HumanEval/96", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/97_prompt", "name": "HumanEval/97", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/98_prompt", "name": "HumanEval/98", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/99_prompt", "name": "HumanEval/99", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num > 0 and num - int(num) == 0.5:\n        return int(num) + 1\n    elif num < 0 and num - int(num) == -0.5:\n        return int(num) - 1\n    else:\n        return round(num)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/100_prompt", "name": "HumanEval/100", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef make_a_pile(n):\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 2\n        pile.append(n)\n    return pile\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/101_prompt", "name": "HumanEval/101", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef words_string(s):\n    # Split the string by commas and spaces\n    words = s.replace(',', ' ').split()\n    return words\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/102_prompt", "name": "HumanEval/102", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    else:\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n        return -1\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/103_prompt", "name": "HumanEval/103", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/104_prompt", "name": "HumanEval/104", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Filter out numbers with even digits\n    unique_numbers = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Return the sorted list of unique numbers\n    return sorted(unique_numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/105_prompt", "name": "HumanEval/105", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef by_length(arr):\n    # Filter out numbers not between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    filtered_arr.sort()\n    \n    # Reverse the sorted array\n    filtered_arr.reverse()\n    \n    # Map each number to its corresponding name\n    name_mapping = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", ", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/106_prompt", "name": "HumanEval/106", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef f(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/107_prompt", "name": "HumanEval/107", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/108_prompt", "name": "HumanEval/108", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/109_prompt", "name": "HumanEval/109", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    \n    return False\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/110_prompt", "name": "HumanEval/110", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef exchange(lst1, lst2):\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    \n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/111_prompt", "name": "HumanEval/111", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef histogram(test):\n    if not test:\n        return {}\n    test = test.split()\n    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/112_prompt", "name": "HumanEval/112", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef reverse_delete(s,c):\n    s = s.replace(''.join(c), '')\n    return (s, s == s[::-1])\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/113_prompt", "name": "HumanEval/113", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = sum(1 for char in string if int(char) % 2 == 1)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/114_prompt", "name": "HumanEval/114", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/115_prompt", "name": "HumanEval/115", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef max_fill(grid, capacity):\n    import math\n    # Calculate the total number of water units in each column\n    column_water = [sum(row[i] for row in grid) for i in range(len(grid[0]))]\n    \n    # Calculate the number of times buckets need to be lowered\n    lowerings = math.ceil(max(column_water) / capacity)\n    \n    return lowerings\n``", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/116_prompt", "name": "HumanEval/116", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/117_prompt", "name": "HumanEval/117", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/118_prompt", "name": "HumanEval/118", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/119_prompt", "name": "HumanEval/119", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Check if the sum of the lengths of the two strings is even\n    if (len(lst[0]) + len(lst[1])) % 2 != 0:\n        return 'No'\n\n    # Check if the first string has more closing parentheses than opening ones\n    if lst[0].", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/120_prompt", "name": "HumanEval/120", "prompt_type": "prompt", "index": 0, "response": "```python3\nclass Solution:\n    def maximum(self, arr: List[int], k: int) -> List[int]:\n        return sorted(arr, reverse=True)[:k]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/121_prompt", "name": "HumanEval/121", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/122_prompt", "name": "HumanEval/122", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef add_elements(arr, k):\n    return sum(num for num in arr[:k] if 0 < num < 100)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/123_prompt", "name": "HumanEval/123", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Add 1 as it is always the last odd number in the sequence\n    return sorted(odd_numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/124_prompt", "name": "HumanEval/124", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date string is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Extract the month, day, and year from the date string\n    month, day, year = date.split('-')\n\n    # Check if the month is valid\n    if not month.isdigit() or int(month) < 1 or int(month) > 12:\n        return False\n\n    # Check if the day is valid\n    if not day.isdigit() or int(day) < 1:\n        return False\n\n    #", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/125_prompt", "name": "HumanEval/125", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/126_prompt", "name": "HumanEval/126", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/127_prompt", "name": "HumanEval/127", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef intersection(interval1, interval2):\n    # Calculate the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If the intersection is empty, return \"NO\"\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"Y", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/128_prompt", "name": "HumanEval/128", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n            sum_of_magnitudes = 0\n            break\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product_of_signs\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/129_prompt", "name": "HumanEval/129", "prompt_type": "prompt", "index": 0, "response": "```python3\nfrom collections import deque\n\ndef minPath(grid, k):\n    N =", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/130_prompt", "name": "HumanEval/130", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        sequence = [3, 1]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        return sequence\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/131_prompt", "name": "HumanEval/131", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/132_prompt", "name": "HumanEval/132", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) > 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/133_prompt", "name": "HumanEval/133", "prompt_type": "prompt", "index": 0, "response": "```python3\nimport math\n\ndef sum_squares(lst):\n    return sum(math.ceil(i)**2 for i in lst)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/134_prompt", "name": "HumanEval/134", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if txt[-1].isalpha():\n        if len(txt) == 1 or txt[-2] == \" \":\n            return True\n    return False\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/135_prompt", "name": "HumanEval/135", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/136_prompt", "name": "HumanEval/136", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/137_prompt", "name": "HumanEval/137", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef compare_one(a, b):\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/138_prompt", "name": "HumanEval/138", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n % 2 == 0 and n >= 8\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/139_prompt", "name": "HumanEval/139", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef special_factorial(n):\n    factorial = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        factorial *= i\n        special_fact *= factorial\n    return special_fact\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/140_prompt", "name": "HumanEval/140", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 2:\n                result.append(\"-\")\n            elif consecutive_spaces > 0:\n                result.extend([\"_\"] * consecutive_spaces)\n            result.append(char)\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result.append(\"-\")\n    elif consecutive_spaces > 0:\n        result.extend([\"_\"] * consecutive_spaces)\n    return \"\".join(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/141_prompt", "name": "HumanEval/141", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef file_name_check(file_name):\n    # Check if there are more than three digits in the file name\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    \n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts before and after the dot\n    name_part, extension_part = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a latin alphapet letter\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    \n    # Check if the extension part is one of the allowed extensions\n    if extension_part not in ['txt', 'exe', 'd", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/142_prompt", "name": "HumanEval/142", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/143_prompt", "name": "HumanEval/143", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/144_prompt", "name": "HumanEval/144", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef simplify(x, n):\n    # Split the fractions into numerator and denominator\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n\n    # Calculate the product of the numerators and denominators\n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n\n    # Check if the product is a whole number\n    return product_numerator % product_denominator == 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/145_prompt", "name": "HumanEval/145", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/146_prompt", "name": "HumanEval/146", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef specialFilter(nums):\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_first_last_odd(n):\n        n = abs(n)\n        return is_odd(int(str(n)[0])) and is_odd(int(str(n)[-1]))\n\n    return sum(1 for num in nums if num > 10 and is_first_last_odd(num))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/147_prompt", "name": "HumanEval/147", "prompt_type": "prompt", "index": 0, "response": "```python3\nclass Solution:\n    def get_max_triples(self, n: int) -> int:\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/148_prompt", "name": "HumanEval/148", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/149_prompt", "name": "HumanEval/149", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list by length, then alphabetically\n    even_length_strings.sort(key=lambda x: (len(x), x))\n    \n    return even_length_strings\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/150_prompt", "name": "HumanEval/150", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/151_prompt", "name": "HumanEval/151", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 != 0)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/152_prompt", "name": "HumanEval/152", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef compare(game,guess):\n    return [abs(a-b) for a,b in zip(game,guess)]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/153_prompt", "name": "HumanEval/153", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/154_prompt", "name": "HumanEval/154", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef cycpattern_check(a , b):\n    # Concatenate the first string with itself\n    concat_a = a + a\n    \n    # Check if the second string is a substring of the concatenated string\n    return b in concat_a\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/155_prompt", "name": "HumanEval/155", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num = abs(num)  # Make sure the number is positive\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/156_prompt", "name": "HumanEval/156", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/157_prompt", "name": "HumanEval/157", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides of the triangle in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/158_prompt", "name": "HumanEval/158", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/159_prompt", "name": "HumanEval/159", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/160_prompt", "name": "HumanEval/160", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/161_prompt", "name": "HumanEval/161", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/162_prompt", "name": "HumanEval/162", "prompt_type": "prompt", "index": 0, "response": "```python3\nimport hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/163_prompt", "name": "HumanEval/163", "prompt_type": "prompt", "index": 0, "response": "```python3\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than b\n    if a > b:\n        a, b = b, a\n\n    # Generate and return the even numbers between a and b\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n```", "answer": "", "question_quality": "0", "code": ""}
